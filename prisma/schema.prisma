// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- BetterAuth models (exact names and fields required by BetterAuth) ---
model User {
  id            String    @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // --- Custom fields ---
  credits       Int       @default(0)

  // Relations
  sessions      Session[]
  accounts      Account[]
  thumbnails    Thumbnail[]
  transactions  CreditTransaction[]

  @@unique([email])
  @@map("user")
}

model Session {
  id          String    @id @default(cuid())
  expiresAt   DateTime
  token       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ipAddress   String?
  userAgent   String?
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id          String    @id @default(cuid())
  identifier  String
  value       String
  expiresAt   DateTime
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt

  @@map("verification")
}

// --- Your app-specific models ---
model Thumbnail {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  prompt    String
  imageUrl  String
  createdAt DateTime @default(now())
}

model CreditTransaction {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  amount    Int              // +ve = add, -ve = spend
  type      TransactionType
  createdAt DateTime         @default(now())
}

enum TransactionType {
  ADD
  SPEND
}